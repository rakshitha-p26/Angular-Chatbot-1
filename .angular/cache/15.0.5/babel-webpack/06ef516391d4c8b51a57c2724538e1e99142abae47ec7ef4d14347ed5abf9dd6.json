{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/message.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"scrollMe\"];\nfunction HelpSupportComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(message_r4.type);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r4.message, \" \");\n  }\n}\nfunction HelpSupportComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\");\n    i0.ɵɵtext(2, \"...\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(\"client\");\n  }\n}\nfunction HelpSupportComponent_div_13_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function HelpSupportComponent_div_13_div_3_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const question_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.populateInput(question_r6.questions));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r6.questions);\n  }\n}\nfunction HelpSupportComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function HelpSupportComponent_div_13_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.askMoreQuestions());\n    });\n    i0.ɵɵtext(2, \"\\u2753 Ask more\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, HelpSupportComponent_div_13_div_3_Template, 3, 1, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.generatedQuestions);\n  }\n}\nexport class HelpSupportComponent {\n  constructor(messageService) {\n    this.messageService = messageService;\n    this.isOpen = false;\n    this.loading = false;\n    this.messages = [];\n    this.chatForm = new FormGroup({\n      message: new FormControl('', [Validators.required])\n    });\n    this.generatedQuestions = [];\n    // Keep track of the last received answer\n    this.lastReceivedAnswer = '';\n    this.messages.push({\n      type: 'client',\n      message: 'Hi, I am your support agent. How can I help you?'\n    });\n  }\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n  sendMessage() {\n    const sentMessage = this.chatForm.value.message;\n    console.log('sentMessage=' + sentMessage);\n    this.loading = true;\n    this.messages.push({\n      type: 'user',\n      message: sentMessage\n    });\n    this.chatForm.reset();\n    this.scrollToBottom();\n    // First send the user message and get a response\n    this.messageService.sendMessage(sentMessage).subscribe(response => {\n      this.loading = false;\n      this.lastReceivedAnswer = response.answer; // Save the last received answer\n      this.messages.push({\n        type: 'client',\n        message: this.lastReceivedAnswer\n      });\n      console.log('response.answer:', this.lastReceivedAnswer);\n      this.scrollToBottom();\n    });\n  }\n  askMoreQuestions() {\n    if (this.lastReceivedAnswer) {\n      // Use the last received answer to generate related questions\n      this.messageService.questionGeneration(this.lastReceivedAnswer).subscribe(qResponse => {\n        console.log('this.generatedQuestions:', qResponse.related_questions.generated_questions);\n        const questionsObj = qResponse.related_questions.generated_questions;\n        console.log('questionsObj:', questionsObj);\n        if (questionsObj) {\n          const questions = questionsObj[0].questions;\n          console.log('questions=' + questions);\n          // Iterate over the questions and add them to the messages array\n          questions.forEach(question => {\n            this.generatedQuestions.push({\n              questions: question\n            });\n          });\n        }\n        console.log('this.questions:', this.generatedQuestions);\n        console.log('this.messages:', this.messages);\n      });\n    }\n  }\n  populateInput(question) {\n    this.chatForm.get('message').setValue(question);\n  }\n  // sendMessage() {\n  //   const sentMessage = this.chatForm.value.message!;\n  //   console.log('sentMessage=' + sentMessage);\n  //   this.loading = true;\n  //   this.messages.push({\n  //     type: 'user',\n  //     message: sentMessage,\n  //   });\n  //   this.chatForm.reset();\n  //   this.scrollToBottom();\n  //   // Find the corresponding questions based on the document_id\n  //   this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n  //     this.loading = false;\n  //     console.log('this.generatedQuestions:', response.related_questions.generated_questions);\n  //     const questionsObj = response.related_questions.generated_questions;\n  //     console.log('questionsObj:', questionsObj);\n  //     if (questionsObj) {\n  //       const questions = questionsObj[0].questions;\n  // console.log('questions='+questions);\n  //       // Iterate over the questions and add them to the messages array\n  //       questions.forEach((question: string[]) => {\n  //         this.generatedQuestions.push({\n  //           questions: question,\n  //         });\n  //       });\n  //     }\n  //     this.messages.push({\n  //       type: 'client',\n  //       message: response.answer,\n  //     });\n  //     console.log('this.questions:', this.generatedQuestions);\n  //     console.log('this.messages:', this.messages);\n  //     console.log('response.answer:', response.answer);\n  //     this.scrollToBottom();\n  //   });\n  // }\n  scrollToBottom() {\n    setTimeout(() => {\n      try {\n        this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight + 500;\n      } catch (err) {}\n    }, 150);\n  }\n}\nHelpSupportComponent.ɵfac = function HelpSupportComponent_Factory(t) {\n  return new (t || HelpSupportComponent)(i0.ɵɵdirectiveInject(i1.MessageService));\n};\nHelpSupportComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HelpSupportComponent,\n  selectors: [[\"app-help-support\"]],\n  viewQuery: function HelpSupportComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myScrollContainer = _t.first);\n    }\n  },\n  decls: 18,\n  vars: 7,\n  consts: [[\"id\", \"helpdesk\"], [\"id\", \"helpdesk-popup-button\", 3, \"click\"], [\"id\", \"helpdesk-popup\"], [\"id\", \"helpdesk-popup-header\"], [\"id\", \"helpdesk-popup-close-button\", 3, \"click\"], [\"id\", \"helpdesk-popup-body\"], [1, \"messages\"], [\"scrollMe\", \"\"], [\"class\", \"message\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"message\", \"style\", \"width: 100%; display: block\", 4, \"ngIf\"], [\"class\", \"messages\", 4, \"ngIf\"], [\"id\", \"helpdesk-popup-footer\", 3, \"formGroup\"], [\"formControlName\", \"message\", \"type\", \"text\", \"id\", \"helpdesk-popup-input\", \"placeholder\", \"Type your message here...\"], [\"id\", \"helpdesk-popup-submit-button\", 3, \"disabled\", \"click\"], [1, \"message\"], [1, \"message\", 2, \"width\", \"100%\", \"display\", \"block\"], [1, \"ask-more-button\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [1, \"generate-questions\", 3, \"click\"]],\n  template: function HelpSupportComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function HelpSupportComponent_Template_button_click_1_listener() {\n        return ctx.openSupportPopup();\n      });\n      i0.ɵɵtext(2, \" Need Help? \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3);\n      i0.ɵɵtext(5, \" Chatbot Support! \");\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function HelpSupportComponent_Template_button_click_6_listener() {\n        return ctx.openSupportPopup();\n      });\n      i0.ɵɵtext(7, \" Close \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 5)(9, \"div\", 6, 7);\n      i0.ɵɵtemplate(11, HelpSupportComponent_div_11_Template, 3, 3, \"div\", 8);\n      i0.ɵɵtemplate(12, HelpSupportComponent_div_12_Template, 3, 2, \"div\", 9);\n      i0.ɵɵtemplate(13, HelpSupportComponent_div_13_Template, 4, 1, \"div\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"form\", 11);\n      i0.ɵɵelement(15, \"input\", 12);\n      i0.ɵɵelementStart(16, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function HelpSupportComponent_Template_button_click_16_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵtext(17, \" Send \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"display\", ctx.isOpen ? \"block\" : \"none\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.messages.length > 2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.chatForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.chatForm.valid);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\tvar __webpack_modules__ = ({\\n\\n 672:\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/sass-loader/dist/cjs.js):\\\\nSassError: \\\\\\\"&\\\\\\\" may only used at the beginning of a compound selector.\\\\n    \\u2577\\\\n128 \\u2502     .generate-questions && .ask-more-button:hover{\\\\n    \\u2502                          ^\\\\n    \\u2575\\\\n  src/app/shared/components/help-support/help-support.component.scss 128:26  root stylesheet\\\");\\n\\n })\\n\\n \\t});\\n\\n \\t\\n \\t// startup\\n \\t// Load entry module and return exports\\n \\t// This entry module doesn't tell about it's top-level declarations so it can't be inlined\\n \\tvar __webpack_exports__ = {};\\n \\t__webpack_modules__[672]();\\n \\tresource = __webpack_exports__;\\n \\t\\n })()\\n;\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","HelpSupportComponent","constructor","messageService","message","required","messages","push","type","openSupportPopup","isOpen","sendMessage","sentMessage","chatForm","value","console","log","loading","reset","scrollToBottom","subscribe","response","lastReceivedAnswer","answer","askMoreQuestions","questionGeneration","qResponse","related_questions","generated_questions","questionsObj","questions","forEach","question","generatedQuestions","populateInput","get","setValue","setTimeout","myScrollContainer","nativeElement","scrollTop","scrollHeight","err","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["/Users/I570594/Documents/Angular-Chatbot/chatbot/src/app/shared/components/help-support/help-support.component.ts","/Users/I570594/Documents/Angular-Chatbot/chatbot/src/app/shared/components/help-support/help-support.component.html"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MessageService } from '../../service/message.service';\n\nexport interface Message {\n  type: string;\n  message: string;\n}\n\nexport interface GeneratedQuestion {\n  questions: string;\n}\n\n@Component({\n  selector: 'app-help-support',\n  templateUrl: './help-support.component.html',\n  styleUrls: ['./help-support.component.scss'],\n})\nexport class HelpSupportComponent {\n  isOpen = false;\n  loading = false;\n  messages: Message[] = [];\n  chatForm = new FormGroup({\n    message: new FormControl('', [Validators.required]),\n  });\n  @ViewChild('scrollMe') private myScrollContainer: any;\n  generatedQuestions: GeneratedQuestion[] = [];\n\n  constructor(private messageService: MessageService) {\n    this.messages.push({\n      type: 'client',\n      message: 'Hi, I am your support agent. How can I help you?',\n    });\n  }\n\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n\n  // Keep track of the last received answer\nlastReceivedAnswer: string = '';\n\nsendMessage() {\n  const sentMessage = this.chatForm.value.message!;\n  console.log('sentMessage=' + sentMessage);\n  this.loading = true;\n  this.messages.push({\n    type: 'user',\n    message: sentMessage,\n  });\n  this.chatForm.reset();\n  this.scrollToBottom();\n\n  // First send the user message and get a response\n  this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n    this.loading = false;\n    this.lastReceivedAnswer = response.answer; // Save the last received answer\n\n    this.messages.push({\n      type: 'client',\n      message: this.lastReceivedAnswer,\n    });\n\n    console.log('response.answer:', this.lastReceivedAnswer);\n    this.scrollToBottom();\n  });\n}\n\naskMoreQuestions() {\n  if(this.lastReceivedAnswer) {\n    // Use the last received answer to generate related questions\n    this.messageService.questionGeneration(this.lastReceivedAnswer).subscribe((qResponse: any) => {\n      console.log('this.generatedQuestions:', qResponse.related_questions.generated_questions);\n      const questionsObj = qResponse.related_questions.generated_questions;\n      console.log('questionsObj:', questionsObj);\n\n      if (questionsObj) {\n        const questions = questionsObj[0].questions;\n        console.log('questions=' + questions);\n\n        // Iterate over the questions and add them to the messages array\n        questions.forEach((question: string) => {\n          this.generatedQuestions.push({\n            questions: question,\n          });\n         });\n      }\n\n      console.log('this.questions:', this.generatedQuestions);\n      console.log('this.messages:', this.messages);\n    });\n  }\n}\npopulateInput(question: string) {\n  this.chatForm.get('message')!.setValue(question);\n}\n\n  \n\n// sendMessage() {\n//   const sentMessage = this.chatForm.value.message!;\n//   console.log('sentMessage=' + sentMessage);\n//   this.loading = true;\n//   this.messages.push({\n//     type: 'user',\n//     message: sentMessage,\n//   });\n//   this.chatForm.reset();\n//   this.scrollToBottom();\n\n//   // Find the corresponding questions based on the document_id\n//   this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n//     this.loading = false;\n//     console.log('this.generatedQuestions:', response.related_questions.generated_questions);\n//     const questionsObj = response.related_questions.generated_questions;\n//     console.log('questionsObj:', questionsObj);\n//     if (questionsObj) {\n//       const questions = questionsObj[0].questions;\n// console.log('questions='+questions);\n//       // Iterate over the questions and add them to the messages array\n//       questions.forEach((question: string[]) => {\n//         this.generatedQuestions.push({\n//           questions: question,\n//         });\n//       });\n//     }\n\n//     this.messages.push({\n//       type: 'client',\n//       message: response.answer,\n//     });\n//     console.log('this.questions:', this.generatedQuestions);\n//     console.log('this.messages:', this.messages);\n//     console.log('response.answer:', response.answer);\n//     this.scrollToBottom();\n//   });\n// }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      try {\n        this.myScrollContainer.nativeElement.scrollTop =\n          this.myScrollContainer.nativeElement.scrollHeight + 500;\n      } catch (err) {}\n    }, 150);\n  }\n}\n","<div id=\"helpdesk\">\n  <button id=\"helpdesk-popup-button\" (click)=\"openSupportPopup()\">\n    Need Help?\n  </button>\n  <div id=\"helpdesk-popup\" [style.display]=\"isOpen ? 'block' : 'none'\">\n    <div id=\"helpdesk-popup-header\">\n      Chatbot Support!\n      <button id=\"helpdesk-popup-close-button\" (click)=\"openSupportPopup()\">\n        Close\n      </button>\n    </div>\n    <div id=\"helpdesk-popup-body\">\n      <div class=\"messages\" #scrollMe>\n        <div *ngFor=\"let message of messages\" class=\"message\">\n          <div [class]=\"message.type\">\n            {{ message.message }}\n          </div>\n        </div>\n        <div *ngIf=\"loading\" class=\"message\" style=\"width: 100%; display: block\">\n          <div [class]=\"'client'\">...</div>\n        </div>\n        <div class=\"messages\" *ngIf=\"messages.length > 2\">\n          <button class=\"ask-more-button\" (click)=\"askMoreQuestions()\">❓ Ask more</button>\n          <div *ngFor=\"let question of generatedQuestions\">\n            <button class=\"generate-questions\" (click)=\"populateInput(question.questions)\">{{ question.questions }}</button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <form id=\"helpdesk-popup-footer\" [formGroup]=\"chatForm\">\n      <input\n        formControlName=\"message\"\n        type=\"text\"\n        id=\"helpdesk-popup-input\"\n        placeholder=\"Type your message here...\"\n      />\n      <button\n        id=\"helpdesk-popup-submit-button\"\n        [disabled]=\"!chatForm.valid\"\n        (click)=\"sendMessage()\"\n      >\n        Send\n      </button>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}