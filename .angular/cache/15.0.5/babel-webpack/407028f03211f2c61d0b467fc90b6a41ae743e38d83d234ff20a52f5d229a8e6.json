{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000';\n  }\n  sendMessage(message) {\n    console.log('service call' + message);\n    const url = `${this.baseUrl}/?query=${encodeURIComponent(message)}`;\n    return this.http.get(url);\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEhB,YAAO,GAAG,uBAAuB;EAFF;EAKvCC,WAAW,CAACC,OAAe;IACzBC,OAAO,CAACC,GAAG,CAAC,cAAc,GAACF,OAAO,CAAC;IACnC,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,WAAWC,kBAAkB,CAACL,OAAO,CAAC,EAAE;IACnE,OAAO,IAAI,CAACF,IAAI,CAACQ,GAAG,CAACH,GAAG,CAAC;EAC3B;;AAVWP,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAW,SAAdX,cAAc;EAAAY,YAFb;AAAM","names":["MessageService","constructor","http","sendMessage","message","console","log","url","baseUrl","encodeURIComponent","get","factory","providedIn"],"sourceRoot":"","sources":["/Users/I570594/Documents/Angular-Chatbot/chatbot/src/app/shared/service/message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  constructor(private http: HttpClient) {}\n\n  private baseUrl = 'http://localhost:8000';\n\n\n  sendMessage(message: string): Observable<any> {\n    console.log('service call'+message)\n    const url = `${this.baseUrl}/?query=${encodeURIComponent(message)}`;\n    return this.http.get(url);\n  }\n  // sendMessage(message: string): Observable<any> {\n  //   console.log('service call'+message);\n  //   const url = `${this.baseUrl}/answer/`;\n  \n  //   // assuming the API expects a JSON object with a 'query' property\n  //   return this.http.post(url, { query: message }).pipe(\n  //     switchMap((response: any) => {\n  //       const relatedQuestionsUrl = `${this.baseUrl}/relatedquestions/`;\n  //       return this.http.post(relatedQuestionsUrl, { query: response.answer }).pipe(\n  //         map(relatedQuestions => ({\n  //           ...response,\n  //           relatedQuestions\n  //         }))\n          \n  //       );\n  //     })\n  //   );\n  // }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}