{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nlet HelpSupportComponent = class HelpSupportComponent {\n  constructor(messageService) {\n    this.messageService = messageService;\n    this.isOpen = false;\n    this.loading = false;\n    this.loadingQuestions = false;\n    this.messages = [];\n    this.state = 'botType'; // Initial state set to 'botType'\n    this.messages$ = new BehaviorSubject([]);\n    this.chatForm = new FormGroup({\n      message: new FormControl('', [Validators.required])\n    });\n    this.generatedQuestions = [];\n    this.feedbackValue = \"No\";\n    this.feedbackSubmitted = false;\n    this.messages.push({\n      type: 'client',\n      message: \"Hi there, I'm your personal Digital Assistant.. How can I help you today?\"\n    });\n    this.messages$.next(this.messages$.getValue().concat([{\n      type: 'client',\n      message: \"Hi there, I'm your personal Digital Assistant.. How can I help you today?\"\n    }]));\n    this.scrollToBottom();\n  }\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n  // startConversationTimeout() {\n  //   this.conversationTimeout = setTimeout(() => {\n  //     // Trigger the feedback prompt after the timeout\n  //     //this.state = 'feedback';\n  //     this.feedbackMessage = 'We value your feedback. Please provide your feedback.';\n  //   }, 90000); // Set the timeout duration in milliseconds (e.g., 30000 for 30 seconds)\n  // }\n  callFeedback() {\n    this.state = 'feedback';\n    this.feedbackMessage = ''; // Clear the feedback message\n  }\n\n  sendMessage() {\n    const sentMessage = this.chatForm.value.message;\n    console.log('sentMessage=' + sentMessage);\n    this.loading = true;\n    this.messages.push({\n      type: 'user',\n      message: sentMessage\n    });\n    this.messages$.next(this.messages$.getValue().concat([{\n      type: 'user',\n      message: sentMessage\n    }]));\n    this.messageService.sendMessage(sentMessage).subscribe(response => {\n      this.loading = false;\n      this.state = 'generatedQuestions'; // Set state to 'generatedQuestions' after getting response\n      this.lastReceivedAnswer = response.answer;\n      this.messages.push({\n        type: 'client',\n        message: this.lastReceivedAnswer\n      });\n      this.messages$.next(this.messages$.getValue().concat([{\n        type: 'client',\n        message: this.lastReceivedAnswer\n      }]));\n      console.log('response.answer:', this.lastReceivedAnswer);\n      clearTimeout(this.conversationTimeout); // Reset the conversation timeout\n      //this.startConversationTimeout(); // Start a new conversation timeout\n      this.chatForm.reset();\n      this.scrollToBottom();\n    });\n  }\n  submitFeedback(feedback) {\n    this.state = 'generatedQuestions';\n    this.feedbackSubmitted = true;\n    this.feedbackValue = feedback;\n    // Display feedback message based on user's input\n    if (feedback === 'Yes') {\n      this.feedbackMessage = \"I'm happy to hear that! ðŸŽ‰. Thank you for your feedback! Goodbye.\";\n    } else if (feedback === 'No') {\n      this.feedbackMessage = \"We're sorry to hear that. Please type your question belowâ¬‡\";\n    }\n  }\n  askMoreQuestions() {\n    this.loadingQuestions = true;\n    this.generatedQuestions = [];\n    if (this.lastReceivedAnswer) {\n      this.messageService.questionGeneration(this.lastReceivedAnswer).subscribe(qResponse => {\n        this.loadingQuestions = false;\n        console.log('this.generatedQuestions:', qResponse.related_questions.generated_questions);\n        const questionsObj = qResponse.related_questions.generated_questions;\n        console.log('questionsObj:', questionsObj);\n        if (questionsObj) {\n          const questions = questionsObj[0].questions;\n          console.log('questions=' + questions);\n          questions.slice(0, 4).forEach(question => {\n            this.generatedQuestions.push({\n              questions: question\n            });\n          });\n        }\n        clearTimeout(this.conversationTimeout); // Reset the conversation timeout\n        //this.startConversationTimeout(); // Start a new conversation timeout\n        console.log('this.questions:', this.generatedQuestions);\n        console.log('this.messages:', this.messages);\n      });\n    }\n    this.state = 'botType'; // Set state to 'botType' after generating questions\n  }\n\n  populateInput(question) {\n    this.chatForm.get('message').setValue(question);\n    this.sendMessage();\n    this.state = 'botType'; // Set state to 'botType' after bot responds to the selected question\n  }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      try {\n        this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight + 500;\n      } catch (err) {}\n    }, 150);\n  }\n};\n__decorate([ViewChild('scrollMe')], HelpSupportComponent.prototype, \"myScrollContainer\", void 0);\nHelpSupportComponent = __decorate([Component({\n  selector: 'app-help-support',\n  templateUrl: './help-support.component.html',\n  styleUrls: ['./help-support.component.scss']\n})], HelpSupportComponent);\nexport { HelpSupportComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormGroup","FormControl","Validators","BehaviorSubject","HelpSupportComponent","constructor","messageService","message","required","messages","push","type","messages$","next","getValue","concat","scrollToBottom","openSupportPopup","isOpen","callFeedback","state","feedbackMessage","sendMessage","sentMessage","chatForm","value","console","log","loading","subscribe","response","lastReceivedAnswer","answer","clearTimeout","conversationTimeout","reset","submitFeedback","feedback","feedbackSubmitted","feedbackValue","askMoreQuestions","loadingQuestions","generatedQuestions","questionGeneration","qResponse","related_questions","generated_questions","questionsObj","questions","slice","forEach","question","populateInput","get","setValue","setTimeout","myScrollContainer","nativeElement","scrollTop","scrollHeight","err","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/I570594/Documents/Angular-Chatbot/chatbot/src/app/shared/components/help-support/help-support.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MessageService } from '../../service/message.service';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Message {\n  type: string;\n  message: string;\n}\n\nexport interface GeneratedQuestion {\n  questions: string;\n}\n\n@Component({\n  selector: 'app-help-support',\n  templateUrl: './help-support.component.html',\n  styleUrls: ['./help-support.component.scss'],\n})\nexport class HelpSupportComponent {\n  conversationTimeout: any;\n  isOpen = false;\n  loading = false;\n  loadingQuestions = false;\n  messages: Message[] = [];\n  state: 'userType' | 'botType' | 'generatedQuestions'| 'feedback' = 'botType'; // Initial state set to 'botType'\n  messages$ = new BehaviorSubject<Array<{ type: string, message: string }>>([]);\n  chatForm = new FormGroup({\n    message: new FormControl('', [Validators.required]),\n  });\n  @ViewChild('scrollMe') private myScrollContainer: any;\n  generatedQuestions: GeneratedQuestion[] = [];\n  lastReceivedAnswer: any;\n  feedbackValue: string = \"No\";\n  feedbackMessage: any;\n  feedbackSubmitted: boolean = false;\n\n  constructor(private messageService: MessageService) {\n    this.messages.push({\n      type: 'client',\n      message: \"Hi there, I'm your personal Digital Assistant.. How can I help you today?\",\n    });\n    this.messages$.next(this.messages$.getValue().concat([{ type: 'client', message: \"Hi there, I'm your personal Digital Assistant.. How can I help you today?\"}]));\n    this.scrollToBottom();\n  }\n\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n\n  // startConversationTimeout() {\n  //   this.conversationTimeout = setTimeout(() => {\n  //     // Trigger the feedback prompt after the timeout\n  //     //this.state = 'feedback';\n  //     this.feedbackMessage = 'We value your feedback. Please provide your feedback.';\n  //   }, 90000); // Set the timeout duration in milliseconds (e.g., 30000 for 30 seconds)\n  // }\n  callFeedback() {\n    this.state = 'feedback';\n    this.feedbackMessage = ''; // Clear the feedback message\n  }\n  \n\n  sendMessage() {\n    const sentMessage = this.chatForm.value.message!;\n    console.log('sentMessage=' + sentMessage);\n    this.loading = true;\n    this.messages.push({\n      type: 'user',\n      message: sentMessage,\n    });\n    this.messages$.next(this.messages$.getValue().concat([{ type: 'user', message: sentMessage }]));\n  \n    this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n      this.loading = false;\n      this.state = 'generatedQuestions'; // Set state to 'generatedQuestions' after getting response\n      this.lastReceivedAnswer = response.answer;\n      this.messages.push({\n        type: 'client',\n        message: this.lastReceivedAnswer,\n      });\n      this.messages$.next(this.messages$.getValue().concat([{ type: 'client', message: this.lastReceivedAnswer }]));\n      console.log('response.answer:', this.lastReceivedAnswer);\n  \n      clearTimeout(this.conversationTimeout); // Reset the conversation timeout\n      //this.startConversationTimeout(); // Start a new conversation timeout\n  \n      this.chatForm.reset();\n      this.scrollToBottom();\n    });\n  }\n  \n  \n  submitFeedback(feedback: string) {\n    this.state = 'generatedQuestions';\n    this.feedbackSubmitted = true;\n    this.feedbackValue = feedback;\n  \n    // Display feedback message based on user's input\n    if (feedback === 'Yes') {\n      this.feedbackMessage = \"I'm happy to hear that! ðŸŽ‰. Thank you for your feedback! Goodbye.\";\n    } else if (feedback === 'No') {\n      this.feedbackMessage = \"We're sorry to hear that. Please type your question belowâ¬‡\";\n    }\n  }\n  \n  \n  \n  askMoreQuestions() {\n    this.loadingQuestions = true;\n    this.generatedQuestions = [];\n  \n    if (this.lastReceivedAnswer) {\n      this.messageService.questionGeneration(this.lastReceivedAnswer).subscribe((qResponse: any) => {\n        this.loadingQuestions = false;\n        console.log('this.generatedQuestions:', qResponse.related_questions.generated_questions);\n        const questionsObj = qResponse.related_questions.generated_questions;\n        console.log('questionsObj:', questionsObj);\n        if (questionsObj) {\n          const questions = questionsObj[0].questions;\n          console.log('questions=' + questions);\n          questions.slice(0, 4).forEach((question: string) => {\n            this.generatedQuestions.push({\n              questions: question,\n            });\n          });\n        }\n        clearTimeout(this.conversationTimeout); // Reset the conversation timeout\n        //this.startConversationTimeout(); // Start a new conversation timeout\n        console.log('this.questions:', this.generatedQuestions);\n        console.log('this.messages:', this.messages);\n      });\n    }\n    \n    this.state = 'botType'; // Set state to 'botType' after generating questions\n  }\n  \n\n  populateInput(question: string) {\n    this.chatForm.get('message')!.setValue(question);\n    this.sendMessage();\n    this.state = 'botType'; // Set state to 'botType' after bot responds to the selected question\n  }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      try {\n        this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight + 500;\n      } catch (err) {}\n    }, 150);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}