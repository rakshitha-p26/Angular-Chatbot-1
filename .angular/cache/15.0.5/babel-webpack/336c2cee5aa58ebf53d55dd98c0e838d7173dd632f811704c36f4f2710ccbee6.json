{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nlet HelpSupportComponent = class HelpSupportComponent {\n  constructor(messageService) {\n    this.messageService = messageService;\n    this.isOpen = false;\n    this.loading = false;\n    this.messages = [];\n    this.state = 'userType';\n    this.messages$ = new BehaviorSubject([]);\n    this.chatForm = new FormGroup({\n      message: new FormControl('', [Validators.required])\n    });\n    this.generatedQuestions = [];\n    // Keep track of the last received answer\n    this.lastReceivedAnswer = '';\n    this.messages.push({\n      type: 'client',\n      message: 'Hi, I am your support agent. How can I help you?'\n    });\n  }\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n  sendMessage() {\n    // Switch to 'generatedQuestions' state\n    this.state = 'userType';\n    const sentMessage = this.chatForm.value.message;\n    console.log('sentMessage=' + sentMessage);\n    this.loading = true;\n    this.messages.push({\n      type: 'user',\n      message: sentMessage\n    });\n    this.messages$.next(this.messages$.getValue().concat([{\n      type: 'user',\n      message: sentMessage\n    }]));\n    this.chatForm.reset();\n    this.scrollToBottom();\n    // First send the user message and get a response\n    this.messageService.sendMessage(sentMessage).subscribe(response => {\n      this.loading = false;\n      this.lastReceivedAnswer = response.answer; // Save the last received answer\n      this.messages.push({\n        type: 'client',\n        message: this.lastReceivedAnswer\n      });\n      this.messages$.next(this.messages$.getValue().concat([{\n        type: 'client',\n        message: this.lastReceivedAnswer\n      }]));\n      this.state = 'userType';\n      console.log('response.answer:', this.lastReceivedAnswer);\n      this.scrollToBottom();\n    });\n  }\n  askMoreQuestions() {\n    this.state = 'generatedQuestions';\n    this.generatedQuestions = []; // Clear the old questions\n    if (this.lastReceivedAnswer) {\n      // Use the last received answer to generate related questions\n      this.messageService.questionGeneration(this.lastReceivedAnswer).subscribe(qResponse => {\n        console.log('this.generatedQuestions:', qResponse.related_questions.generated_questions);\n        const questionsObj = qResponse.related_questions.generated_questions;\n        console.log('questionsObj:', questionsObj);\n        if (questionsObj) {\n          const questions = questionsObj[0].questions;\n          console.log('questions=' + questions);\n          // Iterate over the questions and add them to the messages array\n          questions.slice(0, 4).forEach(question => {\n            this.generatedQuestions.push({\n              questions: question\n            });\n          });\n        }\n        console.log('this.questions:', this.generatedQuestions);\n        console.log('this.messages:', this.messages);\n      });\n    }\n  }\n  populateInput(question) {\n    this.chatForm.get('message').setValue(question);\n    this.sendMessage(); // Automatically send the question after the user selects it\n    this.state = 'botType';\n  }\n  // sendMessage() {\n  //   const sentMessage = this.chatForm.value.message!;\n  //   console.log('sentMessage=' + sentMessage);\n  //   this.loading = true;\n  //   this.messages.push({\n  //     type: 'user',\n  //     message: sentMessage,\n  //   });\n  //   this.chatForm.reset();\n  //   this.scrollToBottom();\n  //   // Find the corresponding questions based on the document_id\n  //   this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n  //     this.loading = false;\n  //     console.log('this.generatedQuestions:', response.related_questions.generated_questions);\n  //     const questionsObj = response.related_questions.generated_questions;\n  //     console.log('questionsObj:', questionsObj);\n  //     if (questionsObj) {\n  //       const questions = questionsObj[0].questions;\n  // console.log('questions='+questions);\n  //       // Iterate over the questions and add them to the messages array\n  //       questions.forEach((question: string[]) => {\n  //         this.generatedQuestions.push({\n  //           questions: question,\n  //         });\n  //       });\n  //     }\n  //     this.messages.push({\n  //       type: 'client',\n  //       message: response.answer,\n  //     });\n  //     console.log('this.questions:', this.generatedQuestions);\n  //     console.log('this.messages:', this.messages);\n  //     console.log('response.answer:', response.answer);\n  //     this.scrollToBottom();\n  //   });\n  // }\n  scrollToBottom() {\n    setTimeout(() => {\n      try {\n        this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight + 500;\n      } catch (err) {}\n    }, 150);\n  }\n};\n__decorate([ViewChild('scrollMe')], HelpSupportComponent.prototype, \"myScrollContainer\", void 0);\nHelpSupportComponent = __decorate([Component({\n  selector: 'app-help-support',\n  templateUrl: './help-support.component.html',\n  styleUrls: ['./help-support.component.scss']\n})], HelpSupportComponent);\nexport { HelpSupportComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormGroup","FormControl","Validators","BehaviorSubject","HelpSupportComponent","constructor","messageService","message","required","messages","push","type","openSupportPopup","isOpen","sendMessage","state","sentMessage","chatForm","value","console","log","loading","messages$","next","getValue","concat","reset","scrollToBottom","subscribe","response","lastReceivedAnswer","answer","askMoreQuestions","generatedQuestions","questionGeneration","qResponse","related_questions","generated_questions","questionsObj","questions","slice","forEach","question","populateInput","get","setValue","setTimeout","myScrollContainer","nativeElement","scrollTop","scrollHeight","err","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/I570594/Documents/Angular-Chatbot/chatbot/src/app/shared/components/help-support/help-support.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MessageService } from '../../service/message.service';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Message {\n  type: string;\n  message: string;\n}\n\nexport interface GeneratedQuestion {\n  questions: string;\n}\n\n@Component({\n  selector: 'app-help-support',\n  templateUrl: './help-support.component.html',\n  styleUrls: ['./help-support.component.scss'],\n})\nexport class HelpSupportComponent {\n  isOpen = false;\n  loading = false;\n  messages: Message[] = [];\n  state: 'userType' | 'botType' | 'generatedQuestions' = 'userType';\n  messages$ = new BehaviorSubject<Array<{ type: string, message: string }>>([]);\n  chatForm = new FormGroup({\n    message: new FormControl('', [Validators.required]),\n  });\n  @ViewChild('scrollMe') private myScrollContainer: any;\n  generatedQuestions: GeneratedQuestion[] = [];\n\n  constructor(private messageService: MessageService) {\n    this.messages.push({\n      type: 'client',\n      message: 'Hi, I am your support agent. How can I help you?',\n    });\n  }\n\n  openSupportPopup() {\n    this.isOpen = !this.isOpen;\n  }\n\n  // Keep track of the last received answer\nlastReceivedAnswer: string = '';\n\nsendMessage() {\n  // Switch to 'generatedQuestions' state\n  this.state = 'userType';\n  const sentMessage = this.chatForm.value.message!;\n  console.log('sentMessage=' + sentMessage);\n  this.loading = true;\n  this.messages.push({\n    type: 'user',\n    message: sentMessage,\n  });\n  this.messages$.next(this.messages$.getValue().concat([{ type: 'user', message: sentMessage }]));\n  this.chatForm.reset();\n  this.scrollToBottom();\n\n  // First send the user message and get a response\n  this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n    this.loading = false;\n    this.lastReceivedAnswer = response.answer; // Save the last received answer\n\n    this.messages.push({\n      type: 'client',\n      message: this.lastReceivedAnswer,\n    });\n    this.messages$.next(this.messages$.getValue().concat([{ type: 'client', message: this.lastReceivedAnswer }]));\n    this.state = 'userType';\n\n    console.log('response.answer:', this.lastReceivedAnswer);\n    this.scrollToBottom();\n     \n     \n  });\n}\n\naskMoreQuestions() {\n  this.state = 'generatedQuestions';\n  this.generatedQuestions = []; // Clear the old questions\n  if(this.lastReceivedAnswer) {\n    // Use the last received answer to generate related questions\n    this.messageService.questionGeneration(this.lastReceivedAnswer).subscribe((qResponse: any) => {\n      console.log('this.generatedQuestions:', qResponse.related_questions.generated_questions);\n      const questionsObj = qResponse.related_questions.generated_questions;\n      console.log('questionsObj:', questionsObj);\n\n      if (questionsObj) {\n        const questions = questionsObj[0].questions;\n        console.log('questions=' + questions);\n\n        // Iterate over the questions and add them to the messages array\n        questions.slice(0, 4).forEach((question: string) => {\n          this.generatedQuestions.push({\n            questions: question,\n          });\n        });\n      }\n\n      console.log('this.questions:', this.generatedQuestions);\n      console.log('this.messages:', this.messages);\n    });\n  }\n}\npopulateInput(question: string) {\n  this.chatForm.get('message')!.setValue(question);\n    this.sendMessage();  // Automatically send the question after the user selects it\n    this.state = 'botType';\n}\n\n\n\n// sendMessage() {\n//   const sentMessage = this.chatForm.value.message!;\n//   console.log('sentMessage=' + sentMessage);\n//   this.loading = true;\n//   this.messages.push({\n//     type: 'user',\n//     message: sentMessage,\n//   });\n//   this.chatForm.reset();\n//   this.scrollToBottom();\n\n//   // Find the corresponding questions based on the document_id\n//   this.messageService.sendMessage(sentMessage).subscribe((response: any) => {\n//     this.loading = false;\n//     console.log('this.generatedQuestions:', response.related_questions.generated_questions);\n//     const questionsObj = response.related_questions.generated_questions;\n//     console.log('questionsObj:', questionsObj);\n//     if (questionsObj) {\n//       const questions = questionsObj[0].questions;\n// console.log('questions='+questions);\n//       // Iterate over the questions and add them to the messages array\n//       questions.forEach((question: string[]) => {\n//         this.generatedQuestions.push({\n//           questions: question,\n//         });\n//       });\n//     }\n\n//     this.messages.push({\n//       type: 'client',\n//       message: response.answer,\n//     });\n//     console.log('this.questions:', this.generatedQuestions);\n//     console.log('this.messages:', this.messages);\n//     console.log('response.answer:', response.answer);\n//     this.scrollToBottom();\n//   });\n// }\n\n  scrollToBottom() {\n    setTimeout(() => {\n      try {\n        this.myScrollContainer.nativeElement.scrollTop =\n          this.myScrollContainer.nativeElement.scrollHeight + 500;\n      } catch (err) {}\n    }, 150);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}