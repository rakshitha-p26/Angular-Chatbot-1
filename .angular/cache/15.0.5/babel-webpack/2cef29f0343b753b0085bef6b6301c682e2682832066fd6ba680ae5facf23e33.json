{"ast":null,"code":"import { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessageService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8000';\n  }\n  // sendMessage(message: string): Observable<any> {\n  //   console.log('service call'+message)\n  //   const url = `${this.baseUrl}/?query=${encodeURIComponent(message)}`;\n  //   return this.http.get(url);\n  // }\n  sendMessage(message) {\n    console.log('service call' + message);\n    const url = `${this.baseUrl}/answer/`;\n    // assuming the API expects a JSON object with a 'query' property\n    return this.http.post(url, {\n      query: message\n    }).pipe(switchMap(response => {\n      const relatedQuestionsUrl = `${this.baseUrl}/relatedquestions/`;\n      return this.http.post(relatedQuestionsUrl, {\n        query: response.answer\n      }).pipe(map(relatedQuestions => ({\n        ...response,\n        relatedQuestions\n      })));\n    }));\n  }\n}\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n};\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;;;AAK/C,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEhB,YAAO,GAAG,uBAAuB;EAFF;EAKvC;EACA;EACA;EACA;EACA;EACAC,WAAW,CAACC,OAAe;IACzBC,OAAO,CAACC,GAAG,CAAC,cAAc,GAACF,OAAO,CAAC;IACnC,MAAMG,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,UAAU;IAErC;IACA,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACF,GAAG,EAAE;MAAEG,KAAK,EAAEN;IAAO,CAAE,CAAC,CAACO,IAAI,CACjDZ,SAAS,CAAEa,QAAa,IAAI;MAC1B,MAAMC,mBAAmB,GAAG,GAAG,IAAI,CAACL,OAAO,oBAAoB;MAC/D,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACI,mBAAmB,EAAE;QAAEH,KAAK,EAAEE,QAAQ,CAACE;MAAM,CAAE,CAAC,CAACH,IAAI,CACzEb,GAAG,CAACiB,gBAAgB,KAAK;QACvB,GAAGH,QAAQ;QACXG;OACD,CAAC,CAAC,CAEJ;IACH,CAAC,CAAC,CACH;EACH;;AA5BWf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAgB,SAAdhB,cAAc;EAAAiB,YAFb;AAAM","names":["map","switchMap","MessageService","constructor","http","sendMessage","message","console","log","url","baseUrl","post","query","pipe","response","relatedQuestionsUrl","answer","relatedQuestions","factory","providedIn"],"sourceRoot":"","sources":["/Users/I570594/Documents/Angular-Chatbot/chatbot/src/app/shared/service/message.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  constructor(private http: HttpClient) {}\n\n  private baseUrl = 'http://localhost:8000';\n\n\n  // sendMessage(message: string): Observable<any> {\n  //   console.log('service call'+message)\n  //   const url = `${this.baseUrl}/?query=${encodeURIComponent(message)}`;\n  //   return this.http.get(url);\n  // }\n  sendMessage(message: string): Observable<any> {\n    console.log('service call'+message);\n    const url = `${this.baseUrl}/answer/`;\n  \n    // assuming the API expects a JSON object with a 'query' property\n    return this.http.post(url, { query: message }).pipe(\n      switchMap((response: any) => {\n        const relatedQuestionsUrl = `${this.baseUrl}/relatedquestions/`;\n        return this.http.post(relatedQuestionsUrl, { query: response.answer }).pipe(\n          map(relatedQuestions => ({\n            ...response,\n            relatedQuestions\n          }))\n          \n        );\n      })\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}